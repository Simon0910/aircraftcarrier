package ${cfg.Repository_p};

import cn.hutool.core.collection.CollUtil;
import cn.hutool.core.text.CharSequenceUtil;
import com.aircraftcarrier.framework.exception.SysException;
import ${cfg.MybatisPlus_f};
import ${cfg.Do_f};
import ${cfg.mapper_f};
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import org.springframework.stereotype.Repository;

import javax.annotation.Resource;
import java.util.Collection;
import java.util.List;


#set ($entityI = ${entity.substring(0, 1).toLowerCase()} + ${entity.substring(1)})
/**
 * $!{table.comment} Repository
 *
 * @author ${author}
 * @date ${date}
 * @since 1.0
 */
@Repository
public class ${cfg.Repository_n} {

    /**
     * ${cfg.mapper_n}
     */
    @Resource
    #set ($mapperI = ${cfg.mapper_n_i})
    private ${cfg.mapper_n} ${mapperI};

    /**
     * ${cfg.MybatisPlus_n}
     */
    @Resource
    #set ($plusI = ${cfg.MybatisPlus_n_i})
    private ${cfg.MybatisPlus_n} ${cfg.MybatisPlus_n_i};

    /**
     * addProductDetails
     *
     * @param insertDo insertDo
     * @param operator operator
     * @return ${entity}
     */
    public ${entity} add${table.originEntityName}(${entity} insertDo, String operator) {
        if (CharSequenceUtil.isBlank(operator)) {
            throw new SysException("add operator must not be empty!");
        }
        ${mapperI}.insert(insertDo);
        return insertDo;
    }

    /**
     * getDetail
     *
     * @param id id
     * @return ${entity}
     */
    public ${entity} getDetail(Long id) {
        if (id == null) {
            throw new SysException("getDetail id must not be null");
        }
        return ${mapperI}.selectById(id);
    }

    /**
     * editSave
     *
     * @param updateSelectiveDo updateSelectiveDo
     * @param operator          operator
     * @return ProductDetailsDo
     */
    public ${entity} editSave(${entity} updateSelectiveDo, String operator) {
        if (CharSequenceUtil.isBlank(operator)) {
            throw new SysException("editSave operator must not be empty!");
        }
        if (updateSelectiveDo.getId() == null) {
            throw new SysException("editSave id must not be null!");
        }
        // 针对多个人看到同一条记录的情况并发时, 并做编辑时的乐观锁+版本号解决冲突
        // update table set xx = xx, version = version + 1 where version = editCmd.getVersion()
        // return 0 throw 系统繁忙,请重试
        ${mapperI}.updateById(updateSelectiveDo);
        return updateSelectiveDo;
    }

    /**
     * deleteBatch
     *
     * @param ids      ids
     * @param operator operator
     * @return int
     */
    public int deleteBatch(Collection<Long> ids, String operator) {
        if (CharSequenceUtil.isBlank(operator)) {
            throw new SysException("deleteBatch operator must not be empty!");
        }
        if (CollUtil.isEmpty(ids)) {
            throw new SysException("deleteBatch ids must not be empty!");
        }
        return ${mapperI}.deleteBatchIds(ids);
    }

    /**
     * selectByIds
     *
     * @param ids ids
     * @return List
     */
    public List<${entity}> selectByIds(Collection<Long> ids) {
        if (ids == null || ids.isEmpty()) {
            throw new SysException("selectByIds ids must not be empty!");
        }

        LambdaQueryWrapper<${entity}> queryWrapper = new LambdaQueryWrapper<${entity}>()
                .in(${entity}::getId, ids);

        return ${mapperI}.selectList(queryWrapper);
    }

    /**
     * saveBatch
     *
     * @param list list
     */
    public void saveBatch(List<${entity}> list) {
        if (list == null || list.isEmpty()) {
            throw new SysException("saveBatch list must not be empty!");
        }

        ${plusI}.saveBatch(list);
    }
}
